{"version":3,"sources":["components/Jumbotron/index.js","components/Wrapper/index.js","components/CharacterCard/index.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","Wrapper","children","CharacterCard","onClick","handleClick","id","alt","name","src","image","Nav","rightWrong","score","topScore","App","state","characters","currentScore","clicked","newScore","_this","indexOf","handleIncrement","setState","concat","handleReset","handleShuffle","shuffledcharacter","array","i","length","j","Math","floor","random","_ref","shufflecharacters","_this2","this","components_Wrapper","components_Nav","components_Jumbotron","map","character","components_CharacterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88f994ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron\">\n      <h1>DC Universe Clicky Game</h1>\n      <p>\n        Click on each character exactly once to win the game. But don't click on a character twice, or it's game over\n        for you! Once you get to 12 you win, but don't worry if you don't make to 12 because the \"Top Score\" section in\n        the top corner will track your best attempt so you know the number that you have to beat the next time around.\n      </p>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst CharacterCard = props => (\n  <div className=\"card\" onClick={() => props.handleClick(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n    <div className=\"content\">\n      <ul>\n        <li>\n          <strong>Name:</strong> {props.name}\n        </li>\n      </ul>\n    </div>\n  </div>\n);\n\nexport default CharacterCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"Nav\">\n      <p>DC Universe Clicky Game</p>\n      <p>{props.rightWrong}</p>\n      <p>Score: {props.score}</p>\n      <p>Top Score: {props.topScore}</p>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport characters from \"./characters.json\";\nimport Nav from \"./components/Nav\";\n\nfunction shufflecharacters(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = { characters, currentScore: 0, topScore: 0, rightWrong: \"\", clicked: [] };\n\n  handleClick = id => {\n    const newScore = this.state.currentScore + 1;\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.setState({ rightWrong: \"WRONG\" });\n      this.handleReset();\n    }\n    if (newScore === 12) {\n      this.setState({ rightWrong: \"You win!\" });\n      this.setState({ topScore: newScore });\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledcharacter = shufflecharacters(characters);\n    this.setState({ characters: shuffledcharacter });\n  };\n\n  render() {\n    return (\n      // <Nav score={this.state.currentScore} topScore={this.state.topScore} />\n      <Wrapper>\n        <Nav score={this.state.currentScore} topScore={this.state.topScore} rightWrong={this.state.rightWrong} />\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          // <CharacterCard id={character.id} name={character.name} image={character.image} />\n          <CharacterCard\n            key={character.id}\n            handleClick={this.handleClick}\n            handleIncrement={this.handleIncrement}\n            handleReset={this.handleReset}\n            handleShuffle={this.handleShuffle}\n            id={character.id}\n            name={character.name}\n            image={character.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}